---
- name: Send data to API Fleetlens
  hosts: all
  become: true
  vars:
    OUTPUT_FILE: "/var/log/fleetlens_system_sync.log"
    API_TOKEN: "{{ API_TOKEN }}"
    API_URL: "{{ API_URL }}" 

  tasks:
    - name: Get hostname
      ansible.builtin.command: hostname -s
      register: hostname_result

    - name: Get IPv4 address
      ansible.builtin.shell: "hostname -I | awk '{print $1}'"
      register: ip_result

    - name: Get operating system
      ansible.builtin.shell: "lsb_release -d | awk -F'\t' '{print $2}'"
      register: os_result

    - name: Get architecture
      ansible.builtin.command: uname -m
      register: arch_result

    - name: Get system users
      ansible.builtin.shell: >
        awk -F: '{printf "{\"username\":\"%s\",\"root\":%s},", $1, ($3==0)?"true":"false"}' /etc/passwd | sed 's/,$//'
      register: users_json

    - name: Get system groups
      ansible.builtin.shell: >
        getent group | awk -F: '{printf "{\"name\":\"%s\",\"members\":[\"%s\"]},", $1, $4}' | sed 's/,$//'
      register: groups_json

    - name: Get installed software
      ansible.builtin.shell: >
        dpkg-query -W -f='{ "packageName": "${Package}", "packageVersion": "${Version}" },' 2>/dev/null | sed 's/,$//'
      register: software_json

    - name: Prepare JSON payload
      set_fact:
        payload: >-
          {
            "machine": {
              "hostname": "{{ hostname_result.stdout }}",
              "ipAddressV4": "{{ ip_result.stdout }}",
              "operatingSystem": "{{ os_result.stdout }}",
              "architecture": "{{ arch_result.stdout }}"
            },
            "accounts": [{{ users_json.stdout }}],
            "groups": [{{ groups_json.stdout }}],
            "softwares": [{{ software_json.stdout }}]
          }

    - name: Send data to the API
      ansible.builtin.uri:
        url: "{{ API_URL }}/api/systems/sync"
        method: POST
        headers:
          Authorization: "Bearer {{ API_TOKEN }}"
          Content-Type: "application/json"
        body: "{{ payload }}"
        body_format: json
        return_content: yes
        status_code: [200, 401, 500]
      register: api_response
      ignore_errors: yes

    - name: Log API response
      ansible.builtin.lineinfile:
        path: "{{ OUTPUT_FILE }}"
        create: yes
        line: >-
          {{ ansible_date_time.iso8601 }} - {{
            'Synchronization successful: ' + api_response.content
            if api_response.status == 200 else
            'Authentication error (401)'
            if api_response.status == 401 else
            'Server error (500)'
            if api_response.status == 500 else
            'Unexpected response (' ~ api_response.status|string ~ '): ' ~ api_response.content
          }}